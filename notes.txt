## create docker-compose file
> docker-compose up -d

- Docker will create and start the containers and network defined in that file.
- Docker creates a custom bridge network named spring-demo:>docker network create spring-demo,
This allows your services (postgres, mail-dev) to communicate by container name (postgres, mail-dev) within the same virtual network.
- Docker creates a named volume called postgres, used to persist Postgres data:>docker volume create postgres,
This ensures your database data is not lost if the container is stopped or removed.
- A container named postgres-sql-bsa is created and started
- A container named mail-dev-bsa is started

## properties file
when we have application-dev.yml file it will inherit all the properties of application.yml file

##
when we load the user, we eagerly load the user roles. Roles will have a list of users. So, it will load the list of users. And it will be a kind of loop.

## generate secret key online
https://secretkeygen.vercel.app/

## check mail
after docker-compose up , we can go to http://localhost:1080/#/
If we receive any mail it will be displayed in that page

## make sure you run docker-compose, if it is up and running then start the application

## Documentation : openapi
http://localhost:8088/api/v1/swagger-ui/index.html

## create angular project
npm list -g @angular/cli
ng version
ng new book-share-frontend

## install bootstrap
https://getbootstrap.com/
go to terminal: npm i bootstrap@5.3.7

## install fontawesome
$ npm i --save @fortawesome/fontawesome-free

## copy into the angular app the api specification
http://localhost:8088/api/v1/v3/api-docs

## install openapi for angular: generates model interfaces and web service clients from an OpenApi 3 specification
$ npm i ng-openapi-gen
$ ng-openapi-gen --input ./src/openapi/openapi.json --output ./src/app/services
> npm run api-gen <-- if we make any change in api specification then we need to rerun the command to get all the changes


## generate components
ng g c login

## CORS
Access to XMLHttpRequest at 'http://localhost:8088/api/v1/auth/authenticate' from origin 'http://localhost:4200' has been blocked by CORS policy:
Response to preflight request doesn't pass access control check:
No 'Access-Control-Allow-Origin' header is present on the requested resource.


## user login:
pp@gmail.com/12345678

## check the JWT token that we stored in local storage: jwt.io

## install
npm i angular-code-input

## generate book module
ng g m book --routing

## generate main component
ng g c main

## generate menu component
ng g c menu

## generate book list component
ng g c book-list

## generate interceptor
ng g interceptor http-token

## generate book card component
ng g c book-card

## if the cover image is not available, then generate a random image

## generate rating component
ng g c rating

## generate my-book component
ng g c my-books

## generate manage-book component
ng g c manage-book

## generate borrowed-book component
## generate returned-book component

1. user registration
2. user login
3. user account activation
4. implement auditing
5. book share, return
6. save feedback
7. documentation

8. login page
9. registration page
10. account activation page
11. book listing page
12. my book page
13. create, update, share feature
14. returned book page
15. logout
